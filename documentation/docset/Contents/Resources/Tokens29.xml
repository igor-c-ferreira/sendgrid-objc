<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Categories/UIImageView+AFNetworking.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cat/UIImageView(AFNetworking)</TokenIdentifier>
			<Abstract type="html">This category adds methods to the UIKit framework&apos;s UIImageView class. The methods in this category provide support for loading remote images asynchronously from a URL.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
            
			
			<NodeRef refid="29"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIImageView/sharedImageCache</TokenIdentifier>
			<Abstract type="html">The image cache used to improve image loadiing performance on scroll views. By default, this is an NSCache subclass conforming to the AFImageCache protocol, which listens for notification warnings and evicts objects accordingly.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>+ (id&lt;AFImageCache&gt;)sharedImageCache</Declaration>
			
			
			<Anchor>//api/name/sharedImageCache</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIImageView/setSharedImageCache:</TokenIdentifier>
			<Abstract type="html">Set the cache used for image loading.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>+ (void)setSharedImageCache:(id&lt;AFImageCache&gt;)imageCache</Declaration>
			<Parameters>
				<Parameter>
					<Name>imageCache</Name>
					<Abstract type="html">The image cache.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setSharedImageCache:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIImageView/setImageResponseSerializer:</TokenIdentifier>
			<Abstract type="html">The response serializer used to create an image representation from the server response and response data. By default, this is an instance of AFImageResponseSerializer.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFImageResponseSerializer&lt;AFURLResponseSerialization&gt; *imageResponseSerializer</Declaration>
			
			
			<Anchor>//api/name/imageResponseSerializer</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIImageView/imageResponseSerializer</TokenIdentifier>
			<Abstract type="html">The response serializer used to create an image representation from the server response and response data. By default, this is an instance of AFImageResponseSerializer.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFImageResponseSerializer&lt;AFURLResponseSerialization&gt; *imageResponseSerializer</Declaration>
			
			
			<Anchor>//api/name/imageResponseSerializer</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/UIImageView/imageResponseSerializer</TokenIdentifier>
			<Abstract type="html">The response serializer used to create an image representation from the server response and response data. By default, this is an instance of AFImageResponseSerializer.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) AFImageResponseSerializer&lt;AFURLResponseSerialization&gt; *imageResponseSerializer</Declaration>
			
			
			<Anchor>//api/name/imageResponseSerializer</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIImageView/setImageWithURL:</TokenIdentifier>
			<Abstract type="html">Asynchronously downloads an image from the specified URL, and sets it once the request is finished. Any previous image request for the receiver will be cancelled.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>- (void)setImageWithURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL used for the image request.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURL:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIImageView/setImageWithURL:placeholderImage:</TokenIdentifier>
			<Abstract type="html">Asynchronously downloads an image from the specified URL, and sets it once the request is finished. Any previous image request for the receiver will be cancelled.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>- (void)setImageWithURL:(NSURL *)url placeholderImage:(UIImage *)placeholderImage</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The URL used for the image request.</Abstract>
				</Parameter><Parameter>
					<Name>placeholderImage</Name>
					<Abstract type="html">The image to be set initially, until the image request finishes. If nil, the image view will not change its image until the image request finishes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURL:placeholderImage:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIImageView/setImageWithURLRequest:placeholderImage:success:failure:</TokenIdentifier>
			<Abstract type="html">Asynchronously downloads an image from the specified URL request, and sets it once the request is finished. Any previous image request for the receiver will be cancelled.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>- (void)setImageWithURLRequest:(NSURLRequest *)urlRequest placeholderImage:(UIImage *)placeholderImage success:(void ( ^ ) ( NSURLRequest *request , NSHTTPURLResponse *response , UIImage *image ))success failure:(void ( ^ ) ( NSURLRequest *request , NSHTTPURLResponse *response , NSError *error ))failure</Declaration>
			<Parameters>
				<Parameter>
					<Name>urlRequest</Name>
					<Abstract type="html">The URL request used for the image request.</Abstract>
				</Parameter><Parameter>
					<Name>placeholderImage</Name>
					<Abstract type="html">The image to be set initially, until the image request finishes. If nil, the image view will not change its image until the image request finishes.</Abstract>
				</Parameter><Parameter>
					<Name>success</Name>
					<Abstract type="html">A block to be executed when the image request operation finishes successfully. This block has no return value and takes three arguments: the request sent from the client, the response received from the server, and the image created from the response data of request. If the image was returned from cache, the request and response parameters will be nil.</Abstract>
				</Parameter><Parameter>
					<Name>failure</Name>
					<Abstract type="html">A block object to be executed when the image request operation finishes unsuccessfully, or that finishes successfully. This block has no return value and takes three arguments: the request sent from the client, the response received from the server, and the error object describing the network or parsing error that occurred.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setImageWithURLRequest:placeholderImage:success:failure:</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/UIImageView/cancelImageRequestOperation</TokenIdentifier>
			<Abstract type="html">Cancels any executing image operation for the receiver, if one exists.</Abstract>
			<DeclaredIn>UIImageView+AFNetworking.h</DeclaredIn>
			
			<Declaration>- (void)cancelImageRequestOperation</Declaration>
			
			
			<Anchor>//api/name/cancelImageRequestOperation</Anchor>
            <NodeRef refid="29"/>
		</Token>
		
        
	</File>
</Tokens>